pom.xml

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>

annotation.ExecutionTime
package com.javatpoint.annotation;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
public @interface ExecutionTime {
}

aspect.ExecutionTimeAspect.java
package com.javatpoint.aspect;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;

import com.javatpoint.annotation.ExecutionTime;

@Aspect
@Component
public class ExecutionTimeAspect {

	@Around("@annotation(com.javatpoint.annotation.ExecutionTime)")
	public Object logExecutionTime(ProceedingJoinPoint joinPoint) throws Throwable {
        long start = System.currentTimeMillis();

        Object proceed = joinPoint.proceed();

        long executionTime = System.currentTimeMillis() - start;

        System.out.println(joinPoint.getSignature() + " executed in " + executionTime + "ms");
        return proceed;
	}
}


controller.ExecutionTimeController.java
package com.javatpoint.controller;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.javatpoint.annotation.ExecutionTime;

@RestController
public class EmployeeController {

	@ExecutionTime
	@RequestMapping(value = "/employee", method = RequestMethod.GET)
	public String removeEmployee() {

		return "new ResponseEntity<Employee>(emp, HttpStatus.OK)";
	}

}